//Chap 3 summary

1. 스택을 생성하는 연산은 프로그래머가 지정한 크기의 새로운 스택을 생성하는 연산이며, 매개변수인 maxStack은 스택이 저장할 수 있는 최대 개수의 element를 의미함
2. IsFull(stack, maxStackSize) 연산은 스택이 가득 찼는지를 확인하며, 저장된 원소의 수가 maxStackSize와 같으면 TRUE('스택이 가득 찼다')를 반환하고 아니면
   FALSE('스택에 여유 저장 공간이 있다')를 반환함 
3. Stack Push(stack, item) 연산은 스택에 새로운 원소를 삽입함. 만일 스택이 가득 찼다(Full)면 더 이상의 원소를 스택에 삽입할 수 없으며, 
   'stackFull' 메시지를 출력함
4. Boolean IsEmpty(stack) 연산은 스택 상태가 빈 상태인지를 확인함. 만일 스택이 빈 상태이면 'TRUE' 값을 반환하고, 스택에 하나 이상의 원소라도 있다면 'FALSE' 값을 반환함.
5. Element Pop(stack) 연산자는 스택이 빈 상태라면 삭제할 원소가 없으므로 'stackEmpty'를 출력함. 하지만 빈 상태가 아니라면 삭제할 원소가 있으므로, 스택의 top이 가르키는 
   원소를 삭제하고 그 원소를 반환함. 
6. 스택의 추상 자료형에서 정의된 연산은 시스템 개발자에 따라 다르게 정의되고 구현될 수도 있고, 컴파일러 설계자에 따라 프로그래밍 언어에서 다르게 제공될 수도 있음. 
7. 스택은 객체와 그 객체가 저장되는 순서를 기억하는 방법에 관한 추상 자료형임.
8. 중위 표기법(infix notation)은 연산자를 피연산자의 사이에 표기하는 방법이며, 일반적으로 가장 많이 사용되는 표기방법(A+B)임.
9. 전위 표기법(prefix notation)은 연산자를 피연산자의 앞에 표기하는 방법(+AB)임. 
10. 후위 표기법(postfix notation)은 연산자를 피연산자의 뒤에 표기하는 방법(AB+)임. 
