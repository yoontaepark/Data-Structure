1. 트리의 노드가 m개 이하의 가지를 가질 수 있는 탐색 트리를 m원 탐색 트리라고 합니다. 
2. m원 탐색 트리는 이진 탐색 트리를 확장한 것으로 탐색 트리의 제한을 따르되 두 개 이상(m개 이하) 자식을 가질 수 있습니다. 
3. 인덱스 구조를 구현하는데 가장 일반적으로 사용하는 것으로 차수가 m인 B트리가 있습니다. 
4. B 트리는 루트와 단말 노드를 제외한 트리의 각 노드가 최소 [m/2] 개의 서브트리를 갖습니다. 
5. B 트리의 루트는 최소한 두개의 서브트리를 갖습니다. 
6. B 트리의 모든 단말 노드는 같은 레벨에 있습니다. 
7. B 트리의 삽입 연산에서 노드가 꽉 차 있는 경우는 분리해서 키값과 포인터를 재분배해야 합니다. 
8. B 트리 삭제 연산에서 삭제 결과 개수가 부족하면 그 노드를 다른 노드와 묶어야 합니다. 
9. 노드의 약 2/3 이상이 차야 하는 B 트리를 B* 트리라고 합니다.
10. B* 트리는 노드가 꽉 차면 분리하지 않고, 키와 포인터를 재배치하여 다른 형제 노드로 옮깁니다. 
11. B+ 트리는 인덱스된 순차 파일을 구성하는 데 사용합니다. 인덱스된 순차 파일은 데이터를 차례로 처리하는
    순차 처리와 특정 데이터를 직접 찾아 처리하는 두가지를 모두 효율적으로 할 수 있는 구조입니다. 
12. B+ 트리는 잎의 마지막 포인터가 다음 키값을 갖는 노드를 가리킵니다. 따라서 순차 처리를 할 때는 이 포인터를 이용해서 차례로 다음 데이터에 접근해서 처리할 수 있습니다. 
13. B+ 트리에서는 모든 키값이 잎에 있고, 그 키값에 대응하는 실제 데이터에 대한 주소를 잎 노드만이 가지고 있습니다. 
