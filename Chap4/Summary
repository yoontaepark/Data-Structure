1. 큐는 한쪽에서는 삽입이 발생하고 다른 한쪽에서는 삭제가 발생하도록 정의되었으며, 
   먼저 삽입된 원소가 먼저 삭제되므로 선입선출(FIFO) 또는 선착순 서브(FCFS) 알고리즘을 갖는 순서 리스트임
2. 큐에서는 원소의 삭제 연산이 이루어지는 곳을 Front라 하고, 삽입 연산이 이루어지는 끝을 Rear라고 함
3. 큐 생성함수(Creat_q(maxQueueSize))를 호출하기만 하면 프로그래머가 지정한 크기의 새로운 큐를 생성할 수 있음. 
   Creat_q(maxQueueSize) 함수의 매개변수인 maxQueue는 큐가 저장할 수 있는 최대 개수의 원소(element)를 의미함
4. Boolean IsFull_q(queue, maxQueueSize) 연산은 큐가 가득 찼는지를 확인함. 
   즉, 큐에 저장된 원소의 개수가 maxQueueSize와 같다면, 그 큐는 가득 찼으며 큐에 자료(원소)를 더 이상 저장할 수 없다는 것을 의미 
5. Queue Add_q(queue, item) 연산은 큐에 새로운 원소를 삽입함.
   만일 큐가 가득 찼다면 더 이상의 원소를 큐에 삽입할 수 없으며, 'queueFull' 메시지를 출력함
6. Boolean IsEmpty(queue) 연산은 큐 상태가 빈 상태인지를 확인함. 만일 큐가 빈 상태이면 'TRUE' 값을 반환하고, 
   큐에 하나 이상의 원소라도 있다면 'FALSE' 값을 반환함
7. Element Deleter_q(queue) 연산자는 큐가 빈 상태라면 삭제할 원소가 없으므로 'queueEmpty'를 출력함. 
   하지만 빈 상태가 아니라면 삭제할 원소가 있으므로, 큐의 front가 가르키는 원소를 삭제하고 그 원소를 반환함
8. 큐의 추상자료형에서 정의된 연산은 시스템 개발자에 따라 다르게 정의되어 규현될 수도 있고, 
   컴파일러 설계자에 따라 프로그래밍 언어에서 다르게 제공될 수도 있음.
9. 원형 큐는 파이프의 입구와 출구 부분을 연결시킨 형태임. 연결된 부분의 데이터 공간을 연속적으로 사용하기 위해 '나머지 연산자'를 사용함. 
