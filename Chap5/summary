1. 리스트의 '순서'는 데이터가 저장되는 물리적인 위치와 상관없이 사람의 머릿속에 인식되는 '논리적인 순서', 혹은 리스트에 나타나는 원소들 간의 '의미적인 순서'를 의미함
2. 배열을 이용한 리스트의 구현은 실제 IT 서비스 환경에서는 자주 사용되지 않고 있음. 
   자료의 삽이과 삭제가 빈번히 발생하는 상황에서, 리스트를 배열로 구현하는 것은 빈번한 자료 이동으로 인하여 컴퓨터 성능에서 비효율을 유발함
3. 포인터를 이용하는 방법은 원소의 자리에는 원소값을 저장하고, 다음 원소를 가리키는 정보의 자리에는 다음 원소가 저장될 위치의 주소값을 저장함. 
   조금 더 '프로그램' 스럽게 설명하자면, 리스트의 원소의 자리와 다음 원소를 가리키는 정보의 자리를 합쳐서 노드(node)라고 함. 
   노드는 데이터 요소(원소)와 리스트의 다음 원소를 지시하는 포인터(pointer, 주소)를 가짐. 이 포인터를 링크(link)라고도 부름 
4. 포인터의 '메모리 주소값'이란 메모리에 저장되는 값의 위치임. 메모리에 저장되는 값(데이터)은 저장 위치에 대한 주소를 가지며, 이 저장 위치를 이용해서 리스트의 원소값을 찾아갈 수 있음
5. 다양한 데이터형의 변수를 하나의 상자 안에 넣어서 선언하거나 사용하는 c 프로그래밍 문법이 구조체(struct)임
