1. 트리에 특정 데이터가 있는지를 검색하고, 노드를 자주 삽입, 삭제하는 응용 문제에 가장 효과적인 이진 트리는 이진 탐색 트리(binary search tree)입니다. 
2. 키는 각 노드를 식별하기 위해 별도의 간단한 이름을 붙여 준 것으로 노드의 데이터라고 생각할 수 있습니다. 
3. 이진 탐색 트리에 대해 전위 순회, 중위 순회 및 후위 순회로 모든 정점을 차례로 순회할 수 있고, 트리 내의 특정 정점을 탐색할 수도 있습니다. 
4. 이진 탐색 트리에서 새 노드는 항상 잎으로 삽입합니다. 즉, 루트부터 키값을 비교하며 자기가 삽입될 위치가 왼쪽이냐 오른쪽이냐를 정하며 내려갑니다. 
5. Splay 트리는 자주 탐색하는 키를 가진 노드를 루트에 가깝게 위치하도록 구성한 이진 탐색 트리입니다. 
6. Splay트리는 Splay 연산을 적용하여 최근에 사용하려고 접근한 노드 x를 루트에 위치시켜 트리를 재구성합니다. 
7. AVL 트리는 노드 Vi의 왼쪽 서브트리 높이와 Vi의 오른쪽 서브트리 높이가 최대 1만큼 차이가 난다는 조건을 만족하는 트리입니다. 
8. 트리의 높이란 노드가 가질 수 있는 가장 높은 레벨에 1을 더한 값으로 루트로부터 잎까지 가장 긴 경로 길이를 말합니다. 
9. 트리의 무게는 트리에 속한 잎 노드의 개수로 정의합니다. 
10. 무게가 균형 잡힌 트리(weight-balanced tree)란 각 노드의 양쪽 서브트리 무게가 균형을 유지하는 트리입니다. BB트리(Bound-balanced)라고도 부릅니다. 
11. AVL 또는 BB트리에 대하여 각각 높이 또는 크기 제한 조건을 만족시키는 데 드는 비용은 트리를 완전히 균형 잡히게 유지하는 비용이나 노력보다 훨씬 작습니다. 
12. 삽입이나 삭제 후에 트리를 완전히 균형 잡히게 유지하기 위해서는 O(n)개의 노드를 옮겨야 하는 반면에, AVL 또는 BB 트리는 O(log2n)개의 노드를 옮기면 되는 것으로 알려졌습니다. 
